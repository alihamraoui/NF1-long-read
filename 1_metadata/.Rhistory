ggplot2::labs(title = one_isoform) +
ggplot2::scale_color_gradientn(limits = limits, colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
return(p)
})
return(plot_list)
}
see_isoforms_expression(seurat_obj, "Rbm39", limits=c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
see_isoforms_expression(seurat_obj, "Rbm39", limits=c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
see_isoforms_expression(seurat_obj, "Rbm39", limits=c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
see_isoforms_expression(seurat_obj, "Rbm39", limits=c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
Seurat::FeaturePlot(seurat_obj, 'Rbm39', reduction = "RNA_pca_20_umap", order = TRUE)+
ggplot2::scale_color_gradientn(limits = c(0,4), colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
Seurat::FeaturePlot(seurat_obj, 'Rbm39', reduction = "RNA_pca_20_umap")+
ggplot2::scale_color_gradientn(limits = c(0,4), colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
see_isoforms_expression = function(sobj, gene, limits) {
isoforms = grep(paste0("^", gene, "\\."), rownames(sobj), value = TRUE)
plot_list = lapply(isoforms, FUN = function(one_isoform) {
p = Seurat::FeaturePlot(sobj, features = one_isoform, order = T,
reduction = name2D) +
ggplot2::labs(title = one_isoform) +
ggplot2::scale_color_gradientn(limits = limits, colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
return(p)
})
return(plot_list)
}
see_isoforms_expression(seurat_obj, "Rbm39", limits=c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
see_isoforms_expression(seurat_obj, "Cirbp", limits=c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
Seurat::FeaturePlot(seurat_obj, 'Hn1', reduction = "RNA_pca_20_umap")+
ggplot2::scale_color_gradientn(limits = c(0,4), colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
View(switch_markers)
see_isoforms_expression(seurat_obj, "Cdkn2c") %>%
patchwork::wrap_plots(., ncol = 3)
see_isoforms_expression(seurat_obj, "Cdkn2c",c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
#pdf(file = "Hn1.pdf",
#    width = 12,
#    height = 6)
see_isoforms_expression(seurat_obj, "Hn1")  %>%
patchwork::wrap_plots(., ncol = 3)
#pdf(file = "Hn1.pdf",
#    width = 12,
#    height = 6)
see_isoforms_expression(seurat_obj, "Hn1",c(0,4))  %>%
patchwork::wrap_plots(., ncol = 3)
#dev.off
isoswitch::plot_marker_score(seurat_obj, switch_markers, ncol=3)
#isoswitch::plot_marker_score(seurat_obj, switch_markers, ncol=3)
pl1 <- plot_marker_matrix(seurat_obj, switch_markers)
#isoswitch::plot_marker_score(seurat_obj, switch_markers, ncol=3)
pl1 <- isoswitch::plot_marker_matrix(seurat_obj, switch_markers)
pl2 <- isoswitch::plot_marker_score(seurat_obj, switch_markers, facet=FALSE, overlaps=16)
pl1 | pl2
#isoswitch::plot_marker_score(seurat_obj, switch_markers, ncol=3)
pl1 <- isoswitch::plot_marker_matrix(seurat_obj, switch_markers)
pl2 <- isoswitch::plot_marker_score(seurat_obj, switch_markers, facet=FALSE, overlaps=16)
pl1 | pl2
#isoswitch::plot_marker_score(seurat_obj, switch_markers, ncol=3)
pl1 <- isoswitch::plot_marker_matrix(seurat_obj, switch_markers)
pl2 <- isoswitch::plot_marker_score(seurat_obj, switch_markers, facet=FALSE, overlaps=16)
pl1 | pl2
isoswitch::plot_marker_matrix(seurat_obj, switch_markers)
#isoswitch::plot_marker_score(seurat_obj, switch_markers, ncol=3)
levels(seurat_obj) <- c(0,1,2,3,4,5,6,7,8)
pl1 <- isoswitch::plot_marker_matrix(seurat_obj, switch_markers)
pl2 <- isoswitch::plot_marker_score(seurat_obj, switch_markers, facet=FALSE, overlaps=16)
pl1 | pl2
pl1 | pl2
#isoswitch::plot_marker_score(seurat_obj, switch_markers, ncol=3)
levels(seurat_obj) <- c(0,1,2,3,4,5,6,7,8)
pl1 <- isoswitch::plot_marker_matrix(seurat_obj, switch_markers)
pl2 <- isoswitch::plot_marker_score(seurat_obj, switch_markers, facet=FALSE, overlaps=16)
pl1 | pl2
#isoswitch::plot_marker_score(seurat_obj, switch_markers, ncol=3)
levels(seurat_obj) <- c(0,1,2,3,4,5,6,7,8)
pl1 <- isoswitch::plot_marker_matrix(seurat_obj, switch_markers)
pl2 <- isoswitch::plot_marker_score(seurat_obj, switch_markers, facet=FALSE, overlaps=16)
pl1 | pl2
Seurat::FeaturePlot(seurat_obj, 'Cdkn2c', reduction = "RNA_pca_20_umap")+
ggplot2::scale_color_gradientn(limits = c(0,4), colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
Seurat::FeaturePlot(seurat_obj, 'Cdkn2c', reduction = "RNA_pca_20_umap")+
ggplot2::scale_color_gradientn(limits = c(0,4), colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
#isoswitch::plot_marker_score(seurat_obj, switch_markers, ncol=3)
levels(seurat_obj) <- c(0,1,2,3,4,5,6,7,8)
pl1 <- isoswitch::plot_marker_matrix(seurat_obj, top)
pl2 <- isoswitch::plot_marker_score(seurat_obj, top, facet=FALSE, overlaps=16)
pl1 | pl2
#isoswitch::plot_marker_score(seurat_obj, switch_markers, ncol=3)
levels(seurat_obj) <- c(0,1,2,3,4,5,6,7,8)
pl1 <- isoswitch::plot_marker_matrix(seurat_obj, switch_markers)
pl2 <- isoswitch::plot_marker_score(seurat_obj, switch_markers, facet=FALSE, overlaps=16)
pl1 | pl2
isoswitch::plot_assay_stats(seurat_obj, "ISO")
see_isoforms_expression(seurat_obj, "Srsf3", limits=c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
see_isoforms_expression = function(sobj, gene, limits) {
isoforms = grep(paste0("^", gene, "\\."), rownames(sobj), value = TRUE)
plot_list = lapply(isoforms, FUN = function(one_isoform) {
p = Seurat::FeaturePlot(sobj, features = one_isoform, order = T,
reduction = name2D) +
ggplot2::labs(title = one_isoform) +
ggplot2::scale_color_gradientn(limits = limits, colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
return(p)
})
return(plot_list)
}
see_isoforms_expression = function(sobj, gene, limits) {
isoforms = grep(paste0("^", gene, "\\."), rownames(sobj), value = TRUE)
plot_list = lapply(isoforms, FUN = function(one_isoform) {
p = Seurat::FeaturePlot(sobj, features = one_isoform, order = F,
reduction = name2D) +
ggplot2::labs(title = one_isoform) +
ggplot2::scale_color_gradientn(limits = limits, colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
return(p)
})
return(plot_list)
}
see_isoforms_expression(seurat_obj, "Cirbp", limits=c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
Seurat::FeaturePlot(seurat_obj, 'Cirbp', reduction = "RNA_pca_20_umap")+
ggplot2::scale_color_gradientn(limits = c(0,4), colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
Seurat::FeaturePlot(seurat_obj, 'Cirbp', reduction = "RNA_pca_20_umap")+
ggplot2::scale_color_gradientn(limits = c(0,4), colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
Seurat::FeaturePlot(seurat_obj, 'Cirbp', reduction = "RNA_pca_20_umap")+
ggplot2::scale_color_gradientn(limits = c(0,4), colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
Seurat::FeaturePlot(seurat_obj, 'Cirbp', reduction = "RNA_pca_20_umap")+
ggplot2::scale_color_gradientn(limits = c(0,4), colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
see_isoforms_expression(seurat_obj, "Srsf3", limits=c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
Seurat::FeaturePlot(seurat_obj, 'Srsf3', reduction = "RNA_pca_20_umap")+
ggplot2::scale_color_gradientn(limits = c(0,4), colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
# Basic function to convert human to mouse gene names
convertHumanGeneList <- function(x){
require("biomaRt")
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
genesV2 = getLDS(attributes = c("hgnc_symbol"), filters = "hgnc_symbol", values = x , mart = human, attributesL = c("mgi_symbol"), martL = mouse, uniqueRows=T)
humanx <- unique(genesV2[, 2])
# Print the first 6 genes found to the screen
print(head(humanx))
return(humanx)
}
genes <- convertMouseGeneList(humGenes)
m.s.genes <- convertHumanGeneList(Seurat::cc.genes$s.genes)
m.s.genes <- convertHumanGeneList(Seurat::cc.genes.updated.2019$s.genes)
library(gprofiler2)
install.packages("gprofiler2")
library(gprofiler2)
mmus_s = gorth(cc.genes.updated.2019$s.genes, source_organism = "hsapiens", target_organism = "mmusculus")$ortholog_name
mmus_s = gorth(Seurat::cc.genes.updated.2019$s.genes, source_organism = "hsapiens", target_organism = "mmusculus")$ortholog_name
mmus_g2m = gorth(Seurat::cc.genes.updated.2019$g2m.genes, source_organism = "hsapiens", target_organism = "mmusculus")$ortholog_name
Seurat::DimPlot(seurat_obj, features= c(s.genes, g2m.genes))
Seurat::DimPlot(seurat_obj, features= c(mmus_s, mmus_g2m))
seurat_obj <- CellCycleScoring(seurat_obj,  g2m.features = mmus_g2m,
s.features = mmus_s)
seurat_obj <- Seurat::CellCycleScoring(seurat_obj,  g2m.features = mmus_g2m,
s.features = mmus_s)
seurat_obj <- Seurat::CellCycleScoring(seurat_obj,  g2m.features = mmus_g2m, s.features = mmus_s)
seurat_obj <- Seurat::CellCycleScoring(seurat_obj, assay="RNA", g2m.features = mmus_g2m, s.features = mmus_s)
DimPlot(seurat_obj,
group.by= "Phase")
Seurat::DimPlot(seurat_obj,
group.by= "Phase")
Seurat::DimPlot(seurat_obj, reduction = "RNA_pca_20_umap",
group.by= "Phase")
seurat_obj <- Seurat::CellCycleScoring(seurat_obj, assay="RNA", g2m.features = mmus_g2m, s.features = mmus_s)
Seurat::DimPlot(seurat_obj, reduction = "RNA_pca_20_umap",
group.by= "Phase")
Seurat::FeaturePlot(seurat_obj, 'Hnrnpa1', reduction = "RNA_pca_20_umap")+
ggplot2::scale_color_gradientn(limits = c(0,4), colors = c("lightgray", "#FDBB84", "#EF6548", "#7F0000", "black")) +
ggplot2::theme(aspect.ratio = 1,
plot.subtitle = element_text(hjust = 0.5)) +
Seurat::NoAxes()
see_isoforms_expression(seurat_obj, "Hnrnpa1", limits=c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
see_isoforms_expression(seurat_obj, "Hnrnpa1", limits=c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
see_isoforms_expression(seurat_obj, "Hnrnpa1", limits=c(0,4)) %>%
patchwork::wrap_plots(., ncol = 3)
# https://github.com/rstudio/rmarkdown/issues/1453
hooks = knitr::knit_hooks$get()
hook_foldable = function(type) {
force(type)
function(x, options) {
res = hooks[[type]](x, options)
if (isFALSE(options[[paste0("fold_", type)]])) return(res)
paste0(
"<details><summary>", "show", "</summary>\n\n",
res,
"\n\n</details>"
)
}
}
knitr::knit_hooks$set(
output = hook_foldable("output"),
plot = hook_foldable("plot")
)
set.seed(1)
knitr::opts_chunk$set(echo = TRUE, # display code
# display chunk output
message = FALSE,
warning = FALSE,
fold_output = FALSE, # for sessionInfo()
fold_plot = FALSE,
# figure settings
fig.align = 'center',
fig.width = 20,
fig.height = 15)
library(dplyr)
library(patchwork)
library(ggplot2)
.libPaths()
source(paste0(out_dir, "/../1_metadata/sourceable_functions.R"))
out_dir = "."
source(paste0(out_dir, "/../1_metadata/sourceable_functions.R"))
source(paste0(out_dir, "/../2_individual/load_sc_data.R"))
lapply(ls(), FUN = function(one_element) {
if (class(eval(parse(text = one_element))) == "function") {
out = one_element
} else {
out = NULL
}
return(out)
}) %>% unlist()
#sample_name = params$sample_name # "TOTO"
sample_name = "2020_18"
#sample_name = params$sample_name # "TOTO"
sample_name = "2020_18"
count_matrix_dir = paste0(out_dir, "/input/", sample_name)
cell_markers = readRDS(paste0(out_dir, "/../1_metadata/nf1_cell_markers.rds"))
cell_markers = lapply(cell_markers, FUN = toupper)
lengths(cell_markers)
color_markers = readRDS(paste0(out_dir, "/../1_metadata/nf1_color_markers.rds"))
data.frame(cell_type = names(color_markers),
color = unlist(color_markers)) %>%
ggplot2::ggplot(., aes(x = cell_type, y = 0, fill = cell_type)) +
ggplot2::geom_point(pch = 21, size = 5) +
ggplot2::scale_fill_manual(values = unlist(color_markers), breaks = names(color_markers)) +
ggplot2::theme_classic() +
ggplot2::theme(legend.position = "none",
axis.line = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank())
sample_info = readRDS(paste0(out_dir, "/../1_metadata/nf1_sample_info.rds"))
sample_info %>%
dplyr::filter(project_name == sample_name)
cut_log_nCount_RNA = 6
cut_nFeature_RNA = 600
cut_percent.mt = 15
cut_percent.rb = 30
scmat_iso <- Seurat::Read10X(paste0(count_matrix_dir, "/isoforms/isoform_matrix/"))
load(paste0(out_dir, "/../2_individual/2022_26_barcodes.rds"))
barcodes = load(paste0(out_dir, "/../2_individual/2022_26_barcodes.rds"))
barcodes = loadRds(paste0(out_dir, "/../2_individual/2022_26_barcodes.rds"))
barcodes = readRDS(paste0(out_dir, "/../2_individual/2022_26_barcodes.rds"))
barcodes = gsub("-1$", "", colnames(barcodes))
barcodes = readRDS(paste0(out_dir, "/../2_individual/2022_26_barcodes.rds"))
barcodes = gsub("-1$", "", barcodes)
intersect(barcodes, colnames(scmat_iso))
table(barcodes %in% colnames(scmat_iso)))
table(barcodes %in% colnames(scmat_iso))
# https://github.com/rstudio/rmarkdown/issues/1453
hooks = knitr::knit_hooks$get()
hook_foldable = function(type) {
force(type)
function(x, options) {
res = hooks[[type]](x, options)
if (isFALSE(options[[paste0("fold_", type)]])) return(res)
paste0(
"<details><summary>", "show", "</summary>\n\n",
res,
"\n\n</details>"
)
}
}
knitr::knit_hooks$set(
output = hook_foldable("output"),
plot = hook_foldable("plot")
)
set.seed(1)
knitr::opts_chunk$set(echo = TRUE, # display code
# display chunk output
message = FALSE,
warning = FALSE,
fold_output = FALSE, # for sessionInfo()
fold_plot = FALSE,
# figure settings
fig.align = 'center',
fig.width = 20,
fig.height = 15)
data_dir = '/Users/hamraoui/Analyses/Benchmark/1-matrix-processing/'
source(paste0(benchmark_dir,"bin/common_imports.R"))
# https://github.com/rstudio/rmarkdown/issues/1453
hooks = knitr::knit_hooks$get()
hook_foldable = function(type) {
force(type)
function(x, options) {
res = hooks[[type]](x, options)
if (isFALSE(options[[paste0("fold_", type)]])) return(res)
paste0(
"<details><summary>", "show", "</summary>\n\n",
res,
"\n\n</details>"
)
}
}
knitr::knit_hooks$set(
output = hook_foldable("output"),
plot = hook_foldable("plot")
)
set.seed(1)
knitr::opts_chunk$set(echo = TRUE, # display code
# display chunk output
message = FALSE,
warning = FALSE,
fold_output = FALSE, # for sessionInfo()
fold_plot = FALSE,
# figure settings
fig.align = 'center',
fig.width = 20,
fig.height = 15)
source(paste0(params$benchmark_dir,"bin/common_imports.R"))
benchmark_dir: "./"
benchmark_dir <-  "./"
source(paste0(params$benchmark_dir,"bin/common_imports.R"))
benchmark_dir <-  "./"
source(paste0(benchmark_dir,"bin/common_imports.R"))
print(paste0(benchmark_dir,"bin/common_imports.R"))
benchmark_dir <-  "../../"
source(paste0(benchmark_dir,"bin/common_imports.R"))
source(paste0(benchmark_dir,"bin/corr-analysis.R"))
benchmark_dir <-  "../../"
source(paste0(benchmark_dir,"bin/common_imports.R"))
source(paste0(benchmark_dir,"bin/corr-analysis.R"))
protocole <- params$protocole
protocole <- params$protocole
data_name <- params$data_name
load(file = paste0(benchmark_dir, "1-matrix-processing/output/", params$illumina))
benchmark_dir <-  "./.."
source(paste0(benchmark_dir,"bin/common_imports.R"))
benchmark_dir <-  "./../"
source(paste0(benchmark_dir,"bin/common_imports.R"))
benchmark_dir <-  "../../"
source(paste0(benchmark_dir,"bin/common_imports.R"))
source(paste0(benchmark_dir,"bin/corr-analysis.R"))
load(file = paste0(benchmark_dir, "1-matrix-processing/output/", params$illumina))
load(file = paste0(benchmark_dir, "1-matrix-processing/output/1-matrix-processing/output/illumina_data.Rdata"))
benchmark_dir <-  "../../"
load(file = paste0(benchmark_dir, "1-matrix-processing/output/1-matrix-processing/output/illumina_data.Rdata"))
load(file = paste0(benchmark_dir, "1-matrix-processing/output/illumina_data.Rdata"))
load(file = paste0(benchmark_dir, "1-matrix-processing/output/", data_name, "_data.Rdata"))
protocole <- params$protocole
data_name <- params$data_name
load(file = paste0(benchmark_dir, "1-matrix-processing/output/illumina_data.Rdata"))
load(file = paste0(benchmark_dir, "1-matrix-processing/output/", data_name, "_data.Rdata"))
Nanopore <- get(data_name)
Illumina <- Illumina[[protocole]]
cat("dim Short read matrix =", dim(Illumina), "; Total UMI :", sum(Illumina))
for (pipe in names(Nanopore)){
cat("\ndim",pipe, "matrix   =", dim(Nanopore[[pipe]]), "; Total UMI :", sum(Nanopore[[pipe]]))
}
cat("dim Short_read matrix =", dim(Illumina), "; Total UMI :", sum(Illumina))
for (pipe in names(Nanopore)){
cat("\ndim",pipe, "matrix   =", dim(Nanopore[[pipe]]), "; Total UMI :", sum(Nanopore[[pipe]]))
}
cat("dim CellRanger matrix =", dim(Illumina), "; Total UMI :", sum(Illumina))
for (pipe in names(Nanopore)){
cat("\ndim",pipe, "matrix   =", dim(Nanopore[[pipe]]), "; Total UMI :", sum(Nanopore[[pipe]]))
}
# https://github.com/rstudio/rmarkdown/issues/1453
hooks = knitr::knit_hooks$get()
hook_foldable = function(type) {
force(type)
function(x, options) {
res = hooks[[type]](x, options)
if (isFALSE(options[[paste0("fold_", type)]])) return(res)
paste0(
"<details><summary>", "show", "</summary>\n\n",
res,
"\n\n</details>"
)
}
}
knitr::knit_hooks$set(
output = hook_foldable("output"),
plot = hook_foldable("plot")
)
set.seed(1)
knitr::opts_chunk$set(echo = TRUE, # display code
# display chunk output
message = FALSE,
warning = FALSE,
fold_output = FALSE, # for sessionInfo()
fold_plot = FALSE,
# figure settings
fig.align = 'center',
fig.width = 20,
fig.height = 15)
data_dir = '/Users/hamraoui/Analyses/Benchmark/1-matrix-processing/'
source(paste0(benchmark_dir,"bin/common_imports.R"))
benchmark_dir = "../../"
source(paste0(benchmark_dir,"bin/common_imports.R"))
source(paste0(benchmark_dir,"bin/corr-analysis.R"))
load(file = paste0(benchmark_dir,"1-matrix-processing/data/*"))
list.files(paste0(benchmark_dir,"1-matrix-processing/data/")), pattern="*.csv", full.names=TRUE)
list.files(paste0(benchmark_dir,"1-matrix-processing/data/")), pattern="*.rds", full.names=TRUE)
list.files(paste0(benchmark_dir,"1-matrix-processing/data/"), pattern="*.rds", full.names=TRUE)
list.files(paste0(benchmark_dir,"1-matrix-processing/data/"), pattern="*.Rds", full.names=TRUE)
list.files(paste0(benchmark_dir,"1-matrix-processing/data/"), pattern="*.Rdata", full.names=TRUE)
list.files(paste0(benchmark_dir,"1-matrix-processing/data/MinION/"), pattern="*.Rdata", full.names=TRUE)
list.files(paste0(benchmark_dir,"1-matrix-processing/data/MinION"), pattern="*.Rdata", full.names=TRUE)
list.files(paste0(benchmark_dir,"1-matrix-processing/output"), pattern="*.Rdata", full.names=TRUE)
list.files(paste0(benchmark_dir,"1-matrix-processing/output/"), pattern="*.Rdata", full.names=TRUE)
list.files(paste0(benchmark_dir,"1-matrix-processing/output/"), full.names=TRUE)
list.files(paste0(benchmark_dir,"1-matrix-processing/"), full.names=TRUE)
list.files(paste0(benchmark_dir), full.names=TRUE)
list.files(paste0(benchmark_dir,'fig'), full.names=TRUE)
list.files(".", full.names=TRUE)
setwd("~/")
setwd("~/")
benchmark_dir = "../../"
source(paste0(benchmark_dir,"bin/common_imports.R"))
setwd("~/")
benchmark_dir = "./../../"
source(paste0(benchmark_dir,"bin/common_imports.R"))
setwd("~/")
benchmark_dir = "./../"
source(paste0(benchmark_dir,"bin/common_imports.R"))
getwd()
setwd("./")
getwd()
setwd("./")
getwd()
setwd(".")
getwd()
setwd()
setwd("~/Analyses/iso_switch/NF1-long-read/1_metadata")
setwd(getSrcDirectory(function(){})[1])
setwd(getSrcDirectory(function(){})[1])
print(utils::getSrcDirectory(function(){}))
print(utils::getSrcDirectory(function(){}))
print(utils::getSrcFilename(function(){}, full.names = TRUE))
print(utils::getSrcFilename(function(){}, full.names = TRUE))
dirname(sys.frame(1)$ofile)
dirname(sys.frame(1))
dirname(sys.frame())
dirname()
system("pwd", intern = T)
dirname(parent.frame(2)$ofile)
here::set_here()
here::set_here()
parent.frame(2)
parent.frame(2)$
ofile
parent.frame(1)
cc <-  parent.frame(1)
cc$cc$cc
cc <-  parent.frame(2)
cc$cc$cc
getwd()
setwd("~/Analyses/iso_switch/NF1-long-read/1_metadata")
setwd("~/Analyses/iso_switch/NF1-long-read/1_metadata")
setwd("./")
getwd()
